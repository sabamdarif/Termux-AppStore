#!/data/data/com.termux/files/usr/bin/bash
set -euo pipefail

# Constants
readonly APP_DIR="/data/data/com.termux/files/usr/opt/appstore"
readonly APP_SCRIPT="$APP_DIR/gtk_app_store.py"
readonly REQUIREMENTS_FILE="$APP_DIR/requirements.txt"
readonly DESKTOP_FILE="org.sabamdarif.termux.appstore.desktop"
readonly REPO_URL="https://github.com/sabamdarif/Termux-AppStore"
readonly COMMON_FUNCTIONS="/data/data/com.termux/files/usr/etc/termux-desktop/common_functions"

show_notification() {
	if command -v notify-send &>/dev/null; then
		notify-send "Termux App Store" "$1" --urgency=critical
	fi
	echo "$1"
}

if [[ -f "$COMMON_FUNCTIONS" ]]; then
	# shellcheck source=/dev/null
	source "$COMMON_FUNCTIONS"
else
	print_failed "common_functions missing. Install sabamdarif/termux-desktop"
	exit 1
fi
detact_package_manager

install_appstore() {
	local version="${1:-src}"

	print_msg "Installing Termux App Store (version: $version)..."

	print_msg "Installing required packages..."
	package_install_and_check "aria2 python python-pip pygobject python-pillow git" || {
		print_failed "Failed to install dependencies"
		return 1
	}

	check_and_delete "$APP_DIR"
	check_and_create_directory "$APP_DIR" || {
		print_failed "Failed to create app directory"
		return 1
	}

	print_msg "Cloning repository (branch: $version)..."
	if ! git clone -b "$version" "$REPO_URL" "$APP_DIR"; then
		print_failed "Failed to clone repository. Check if version '$version' exists."
		return 1
	fi

	print_msg "Creating launcher symlink..."
	check_and_delete "$PREFIX/bin/appstore"
	if [[ -f "$APP_DIR/appstore" ]]; then
		ln -sf "$APP_DIR/appstore" "$PREFIX/bin/appstore" || {
			print_failed "Failed to create symlink"
			return 1
		}
		chmod +x "$PREFIX/bin/appstore"
	else
		print_failed "Launcher script not found in repository"
		return 1
	fi

	print_msg "Installing desktop file..."
	if [[ -f "$APP_DIR/$DESKTOP_FILE" ]]; then
		check_and_create_directory "$PREFIX/share/applications"
		cp "$APP_DIR/$DESKTOP_FILE" "$PREFIX/share/applications/" || {
			print_failed "Failed to copy desktop file"
			return 1
		}
	else
		print_failed "Desktop file not found in repository"
	fi

	if [[ -f "$REQUIREMENTS_FILE" ]]; then
		print_msg "Installing Python dependencies..."
		pip install -r "$REQUIREMENTS_FILE" || {
			print_failed "Failed to install Python dependencies"
			return 1
		}
	else
		print_failed "requirements.txt not found"
	fi

	if verify_installation; then
		print_success "Termux App Store installed successfully"
	else
		print_failed "Installation verification failed"
		return 1
	fi
}

verify_installation() {
	local required_files=(
		"$APP_SCRIPT"
		"$APP_DIR/inbuild_functions/inbuild_functions"
		"$APP_DIR/style/style.css"
	)

	local missing_files=()
	for file in "${required_files[@]}"; do
		[[ -f "$file" ]] || missing_files+=("$file")
	done

	if ((${#missing_files[@]} > 0)); then
		print_failed "Missing required files:"
		printf '  • %s\n' "${missing_files[@]}" >&2
		return 1
	fi

	return 0
}

update_appstore() {
	if [[ ! -d "$APP_DIR" ]]; then
		print_failed "App store not installed. Run: appstore --install"
		return 1
	fi

	print_msg "Checking for updates..."

	local update_needed=false
	local changed_files=()

	# List of files to check: "local_path|github_path"
	local files_to_check=(
		"$APP_DIR/gtk_app_store.py|gtk_app_store.py"
		"$APP_DIR/inbuild_functions/inbuild_functions|inbuild_functions/inbuild_functions"
		"$APP_DIR/requirements.txt|requirements.txt"
		"$APP_DIR/style/style.css|style/style.css"
		"$APP_DIR/appstore|appstore"
		"$PREFIX/share/applications/$DESKTOP_FILE|$DESKTOP_FILE"
	)

	for entry in "${files_to_check[@]}"; do
		local local_path="${entry%|*}"
		local github_path="${entry#*|}"

		# Get GitHub file hash
		local github_hash
		github_hash=$(curl -sL "https://raw.githubusercontent.com/sabamdarif/Termux-AppStore/refs/heads/src/${github_path}" | sha256sum | awk '{print $1}')

		# Get local file hash
		if [[ -f "$local_path" ]]; then
			local local_hash
			local_hash=$(sha256sum "$local_path" | awk '{print $1}')

			# Compare hashes
			if [[ "$local_hash" != "$github_hash" ]]; then
				update_needed=true
				changed_files+=("$github_path")
			fi
		else
			update_needed=true
			changed_files+=("$github_path (missing)")
		fi
	done

	if [[ "$update_needed" == true ]]; then
		print_msg "Updates available for:"
		printf '  • %s\n' "${changed_files[@]}"
		echo

		local confirm_update
		confirmation_y_or_n "Update to the latest version?" confirm_update

		if [[ "$confirm_update" == "y" ]]; then
			print_msg "Updating appstore..."
			install_appstore "src" && print_success "Appstore updated successfully"
		else
			print_msg "Update cancelled"
		fi
	else
		print_success "Already using the latest version"
	fi
}

remove_appstore() {
	print_msg "Removing Termux App Store..."
	check_and_delete "$APP_DIR $PREFIX/share/applications/$DESKTOP_FILE $PREFIX/bin/appstore"
	print_success "Termux App Store removed"
}

check_dependencies() {
	if ! command -v python3 &>/dev/null; then
		show_notification "Error: Python 3 not installed. Run: pkg install python"
		return 1
	fi

	if ! command -v pip &>/dev/null; then
		show_notification "Error: pip not installed. Run: pkg install python-pip"
		return 1
	fi

	return 0
}

check_python_dependencies() {
	print_msg "Checking Python dependencies..."

	local missing_deps=()

	# Check each package from requirements.txt
	while IFS= read -r line; do
		[[ -z "$line" || "$line" =~ ^[[:space:]]*# ]] && continue

		local pkg
		pkg=$(echo "$line" | sed -E 's/^([A-Za-z0-9_-]+).*/\1/')

		# Map package names to import names
		local import_name="$pkg"
		case "$pkg" in
		Pillow) import_name="PIL" ;;
		PyYAML) import_name="yaml" ;;
		esac

		if ! python3 -c "import $import_name" &>/dev/null; then
			missing_deps+=("$pkg")
		fi
	done <"$REQUIREMENTS_FILE"

	# Check PyGObject
	if ! python3 -c "import gi" &>/dev/null; then
		missing_deps+=("PyGObject")
	fi

	if ((${#missing_deps[@]} > 0)); then
		show_notification "Missing Python dependencies: ${missing_deps[*]}"
		print_failed "Install with: pip install -r $REQUIREMENTS_FILE"
		print_msg "For PyGObject: pkg install python-gobject"
		return 1
	fi

	print_success "All dependencies satisfied"
	return 0
}

launch_appstore() {
	check_dependencies || return 1
	verify_installation || {
		print_failed "Installation corrupted. Reinstall with: appstore --install"
		return 1
	}
	check_python_dependencies || return 1

	print_success "Launching App Store..."
	python3 "$APP_SCRIPT"
}

show_help() {
	cat <<EOF
Usage: appstore [OPTION] [VERSION]

Options:
  -i, --install [VERSION]   Install app store (default: src)
  -u, --update              Check and update to latest version
  -r, --remove              Remove app store
  -h, --help                Show this help message

Examples:
  appstore --install        Install latest version (src branch)
  appstore --install v0.5.4 Install specific version
  appstore                  Launch app store
  appstore --update         Update to latest version
EOF
}

main() {
	if [[ $# -eq 0 ]]; then
		launch_appstore
		exit $?
	fi

	while [[ $# -gt 0 ]]; do
		case "$1" in
		-i | --install)
			shift
			if [[ -n "${1:-}" && ! "$1" =~ ^- ]]; then
				install_appstore "$1"
				exit $?
			else
				install_appstore "src"
				exit $?
			fi
			;;
		-u | --update)
			update_appstore
			exit $?
			;;
		-r | --remove)
			remove_appstore
			exit $?
			;;
		-h | --help)
			show_help
			exit 0
			;;
		*)
			print_failed "Unknown option: $1"
			echo "Use 'appstore --help' for usage information"
			exit 1
			;;
		esac
	done
}

main "$@"
