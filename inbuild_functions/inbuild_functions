#!/data/data/com.termux/files/usr/bin/bash

termux_desktop_path="/data/data/com.termux/files/usr/etc/termux-desktop"
config_file="$termux_desktop_path/configuration.conf"
log_file="/data/data/com.termux/files/home/.appstore/app-install.log"

function print_log() {
    local call_stack=""

    for ((i = 1; i < ${#FUNCNAME[@]}; i++)); do
        if [[ -n "${FUNCNAME[$i]}" ]]; then
            call_stack+="${FUNCNAME[$i]} -> "
        fi
    done

    # Remove the trailing " -> "
    call_stack="${call_stack::-4}"

    # Print the logs in a structured way
    {
      	echo "========== $(date '+%Y-%m-%d %H:%M:%S') under ${call_stack:-main} =========="

        # If multiple arguments are passed, print each on a new line
        if [[ $# -gt 1 ]]; then
            for arg in "$@"; do
                echo "$arg"
            done
        else
            # Print single argument as-is
            echo "$1"
        fi

		echo "========================================"
    } >> "$log_file"
}

function print_success() {
    echo "[✓] $1"
    print_log "SUCCESS: $1"
}

function print_failed() {
    echo "[✗] $1"
    print_log "FAILED: $1"
}

function print_warn() {
    echo "[!] $1"
    print_log "WARNING: $1"
}

function wait_for_keypress() {
	read -n1 -s -r -p "Press any key to continue..."
	echo
}

function check_and_create_directory() {
    if [[ ! -d "$1" ]]; then
        mkdir -p "$1"
        print_log "Created directory: $1"
    fi
}

function check_and_delete() {
    for item in "$@"; do
        if [[ -e "$item" ]]; then
            rm -rf "$item" >/dev/null 2>&1
            print_log "Deleted: $item"
        fi
    done
}

# first check then backup
function check_and_backup() {
	local file
	local files_folders
    for files_folders in "$@"; do
        for file in $files_folders; do
            if [[ -e "$file" ]]; then
            local date_str
			date_str=$(date +"%d-%m-%Y")
			local backup="${file}-${date_str}.bak"
			    if [[ -e "$backup" ]]; then
				echo "Backup file ${backup} already exists"
				echo
				fi
		    echo "backing up file $file"
			mv "$1" "$backup"
			print_log "$1 $backup"
            fi
        done
    done
}

function download_file() {
    local url="$1"
    local file_name="$(basename "$url")"

    if ! command -v aria2c &> /dev/null; then
        package_install_and_check "aria2"
    fi
    check_and_delete "$file_name"

    if command -v aria2c &> /dev/null; then
        aria2c --summary-interval=1 -x16 -s16 --retry-wait=15 --max-tries=5 --dir="./" "$url"
        if [[ $? -eq 0 && -f "$file_name" && -s "$file_name" ]]; then
            print_success "Download completed: $file_name"
            return 0
        else
            print_status "aria2c download failed, falling back to wget..."
        fi
    fi

    # Fallback to wget if aria2c fails or isn't available
    print_status "Falling back to wget..."
    wget -O "$file_name" "$url"
    if [[ $? -eq 0 && -f "$file_name" && -s "$file_name" ]]; then
        print_success "Download completed: $file_name"
        return 0
    else
        print_failed "Download failed: $file_name"
        check_and_delete "$file_name"
        return 1
    fi
}

function extract() {
    local archive="$1"
    local output_dir="$2"
    
    if [[ ! -f "$archive" ]]; then
        echo "Error: '$archive' does not exist!"
        return 1
    fi

    # Prepare output directory argument if provided
    local dir_arg=""
    if [[ -n "$output_dir" ]]; then
        check_and_create_directory "$output_dir"
        dir_arg="-C $output_dir"
    fi

    case "$archive" in
        *.tar.gz|*.tgz)
            # Add --no-same-owner to prevent permission issues and -h to dereference hard links
            tar xvzf "$archive" $dir_arg --no-same-owner -h || true
            ;;
        *.tar.xz)
            tar xvJf "$archive" $dir_arg --no-same-owner -h || true
            ;;
        *.tar.bz2|*.tbz2)
            tar xvjf "$archive" $dir_arg --no-same-owner -h || true
            ;;
        *.tar)
            tar xvf "$archive" $dir_arg --no-same-owner -h || true
            ;;
        *.bz2)
            if [[ -n "$output_dir" ]]; then
                bunzip2 -c "$archive" > "$output_dir/$(basename "${archive%.bz2}")"
            else
                bunzip2 "$archive"
            fi
            ;;
        *.gz)
            if [[ -n "$output_dir" ]]; then
                gunzip -c "$archive" > "$output_dir/$(basename "${archive%.gz}")"
            else
                gunzip -c "$archive" > "${archive%.gz}"
            fi
            ;;
        *.7z)
            if [[ -n "$output_dir" ]]; then
                7z x "$archive" -o"$output_dir" -y
            else
                7z x "$archive" -y
            fi
            ;;
        *.rar)
            if [[ -n "$output_dir" ]]; then
                unrar x -o+ "$archive" "$output_dir"
            else
                unrar x -o+ "$archive"
            fi
            ;;
        *.zip)
            if [[ -n "$output_dir" ]]; then
                unzip -o "$archive" -d "$output_dir"
            else
                unzip -o "$archive"
            fi
            ;;
        *)
            echo "Unsupported archive format: $archive"
            return 1
            ;;
    esac
}

# find a backup file which end with a number pattern and restore it
function check_and_restore() {
    local target_path="$1"
    local dir
    local base_name

    dir=$(dirname "$target_path")
    base_name=$(basename "$target_path")

    local latest_backup
   latest_backup=$(find "$dir" -maxdepth 1 -type f -name "$base_name-[0-9][0-9]-[0-9][0-9]-[0-9][0-9][0-9][0-9].bak" 2>/dev/null | sort | tail -n 1)

    if [[ -z "$latest_backup" ]]; then
        print_failed "No backup file found for ${target_path}."
		echo
        return 1
    fi

    if [[ -e "$target_path" ]]; then
        print_failed "Original file or directory ${target_path} already exists."
		echo
    else
        mv "$latest_backup" "$target_path"
        print_success "Restored ${latest_backup} to ${target_path}"
		echo
    fi
	print_log "$target_path $dir $base_name $latest_backup"
}

function detact_package_manager() {
    source "/data/data/com.termux/files/usr/bin/termux-setup-package-manager"
    if [[ "$TERMUX_APP_PACKAGE_MANAGER" == "apt" ]]; then
        PACKAGE_MANAGER="apt"
    elif [[ "$TERMUX_APP_PACKAGE_MANAGER" == "pacman" ]]; then
        PACKAGE_MANAGER="pacman"
    else
        PACKAGE_MANAGER="pkg"
        print_warn "Using pkg as fallback package manager"
    fi
    print_log "Package manager: $PACKAGE_MANAGER"
}

# will check if the package is already installed or not, if it installed then it will reinstall it and at the end it will print success/failed message
function package_install_and_check() {
    packs_list=($@)
    for package_name in "${packs_list[@]}"; do
        echo " Processing package: $package_name"

        if [[ "$PACKAGE_MANAGER" == "pacman" ]]; then
            if pacman -Qi "$package_name" >/dev/null 2>&1; then
				print_log "$package_name = already_exist"
                continue
            fi

            if [[ $package_name == *"*"* ]]; then
                echo " Processing wildcard pattern: $package_name"
				print_log "Processing wildcard pattern: $package_name"
                packages=$(pacman -Ssq "${package_name%*}" 2>/dev/null)
                for pkgs in $packages; do
                    echo " Installing matched package: $pkgs"
                    pacman -Sy --noconfirm --overwrite '*' "$pkgs"
                done
            else
                pacman -Sy --noconfirm --overwrite '*' "$package_name"
            fi

        else
            if [[ $package_name == *"*"* ]]; then
                echo " Processing wildcard pattern: $package_name"
				print_log "Processing wildcard pattern: $package_name"
                packages_by_name=$(apt-cache search "${package_name%*}" | awk "/^${package_name}/ {print \$1}")
				packages_by_description=$(apt-cache search "${package_name%*}" | grep -Ei "\b${package_name%*}\b" | awk '{print $1}')
				packages=$(echo -e "${packages_by_name}\n${packages_by_description}" | sort -u)
                for pkgs in $packages; do
                    echo " Installing matched package: $pkgs"
                    if dpkg -s "$pkgs" >/dev/null 2>&1; then
						print_log "$pkgs = already_exist"
                        pkg reinstall "$pkgs" -y
                    else
                        pkg install "$pkgs" -y
                    fi
                done
            else
                if dpkg -s "$package_name" >/dev/null 2>&1; then
					print_log "$package_name = already_exist"
                    pkg reinstall "$package_name" -y
                else
                    pkg install "$package_name" -y
                fi
            fi
        fi

        # Check installation success
        if [ $? -ne 0 ]; then
            echo " Error detected during installation of: $package_name"
			print_log "Error detected during installation of: $package_name"
            if [[ "$PACKAGE_MANAGER" == "pacman" ]]; then
                pacman -Sy --overwrite '*' "$package_name"
                pacman -Sy --noconfirm "$package_name"
            else
                apt --fix-broken install -y
                dpkg --configure -a
                pkg install "$package_name" -y
            fi
        fi

        # Final verification
		if [[ $package_name != *"*"* ]]; then
        	if [[ "$PACKAGE_MANAGER" == "pacman" ]]; then
        	    if pacman -Qi "$package_name" >/dev/null 2>&1; then
        	        print_success "$package_name installed successfully"
        	    else
        	        print_failed "$package_name installation failed "
        	    fi
        	else
        	    if dpkg -s "$package_name" >/dev/null 2>&1; then
        	        print_success "$package_name installed successfully"
        	    else
        	        print_failed "$package_name installation failed "
        	    fi
        	fi
		fi
    done
    echo ""
	print_log "package list: $packs_list"
}

# will check the package is installed or not then remove it
function package_remove_and_check() {
    packs_list=($@)
    for package_name in "${packs_list[@]}"; do
        echo " Processing package: $package_name"

        if [[ $package_name == *"*"* ]]; then
            echo " Processing wildcard pattern: $package_name"
			print_log "Processing wildcard pattern: $package_name"
            if [[ "$PACKAGE_MANAGER" == "pacman" ]]; then
                packages=$(pacman -Qq | grep -E "${package_name//\*/.*}")
            else
                packages=$(dpkg --get-selections | awk '{print $1}' | grep -E "${package_name//\*/.*}")
            fi

            for pkg in $packages; do
                echo " Removing matched package: $pkg"
                if [[ "$PACKAGE_MANAGER" == "pacman" ]]; then
                    if pacman -Qi "$pkg" >/dev/null 2>&1; then
                        pacman -Rnds --noconfirm "$pkg"
                        if [ $? -eq 0 ]; then
                            print_success "$pkg removed successfully"
							print_log "Processing wildcard pattern: $package_name"
                        else
                            print_failed "Failed to remove $pkg "
                        fi
                    fi
                else
                    if dpkg -s "$pkg" >/dev/null 2>&1; then
                        apt autoremove "$pkg" -y
                        if [ $? -eq 0 ]; then
                            print_success "$pkg removed successfully"
                        else
                            print_failed "Failed to remove $pkg "
                        fi
                    fi
                fi
            done
        else
            if [[ "$PACKAGE_MANAGER" == "pacman" ]]; then
                if pacman -Qi "$package_name" >/dev/null 2>&1; then
                    echo " Removing package: $package_name"
                    pacman -Rnds --noconfirm "$package_name"
                    if [ $? -eq 0 ]; then
                        print_success "$package_name removed successfully"
                    else
                        print_failed "Failed to remove $package_name "
                    fi
                fi
            else
                if dpkg -s "$package_name" >/dev/null 2>&1; then
                    echo " Removing package: $package_name"
                    apt autoremove "$package_name" -y
                    if [ $? -eq 0 ]; then
                        print_success "$package_name removed successfully"
                    else
                        print_failed "Failed to remove $package_name "
                    fi
                fi
            fi
        fi
    done
    echo ""
	print_log "$package_name"
}

function get_file_name_number() {
    current_file=$(basename "$0")
    folder_name="${current_file%.sh}"
    theme_number=$(echo "$folder_name" | grep -oE '[1-9][0-9]*')
	print_log "$theme_number"
}

# get the latest version from a github releases
# ex. latest_tag=$(get_latest_release "$repo_owner" "$repo_name")
function get_latest_release() {
	local repo_owner="$1"
	local repo_name="$2"
	curl -s "https://api.github.com/repos/$repo_owner/$repo_name/releases/latest" |
	grep '"tag_name":' |
	sed -E 's/.*"v?([^"]+)".*/\1/'
}

function preprocess_conf() {
    # Preprocess configuration file:
    # 1. Remove lines where keys contain dashes (-).
    # 2. Remove quotes from keys and values.
	echo " Prepering config file..."
    sed -i -E '/^[[:space:]]*[^#=]+-.*=/d; s/^([[:space:]]*[^#=]+)="([^"]*)"/\1=\2/g' "$config_file"
}

function read_conf() {
    if [[ ! -f "$config_file" ]]; then
        print_failed "Configuration file not found: $config_file"
        exit 1
    fi
    source "$config_file"
}

function update_sys() {
    if [[ "$PACKAGE_MANAGER" == "pacman" ]]; then
        pacman -Syu --noconfirm
    else
        pkg update -y -o Dpkg::Options::="--force-confnew"
        pkg upgrade -y -o Dpkg::Options::="--force-confnew"
    fi
}

function fix_exec() {
    sed -i -E 's|^Exec=([^ ]+)(.*)|Exec=pdrun \1\2 '"$2"'|' "/data/data/com.termux/files/usr/share/applications/$1"
}

function install_appimage() {
local appimage_file_name="$1"
local appimage_directory_name="$2"
distro_run '
check_and_create_directory '/opt/AppImageLauncher/'
check_and_delete '/opt/AppImageLauncher/$appimage_directory_name'
'
mv -f "$appimage_file_name" "$distro_path/opt/AppImageLauncher/"
distro_run "
cd /opt/AppImageLauncher
ldconfig
chmod +x '${appimage_file_name}'
APPIMAGE_EXTRACT_AND_RUN=1 ./${appimage_file_name} --appimage-extract
mv -f squashfs-root '$appimage_directory_name'
check_and_delete '${appimage_file_name}'
"
}

function get_latest_version() {
    local package_name
    local latest_version
    package_name=$1
    if [[ "$PACKAGE_MANAGER" == "apt" ]]; then
        latest_version=$(apt-cache policy "$package_name" | grep 'Candidate:' | awk '{print $2}')
    elif [[ "$PACKAGE_MANAGER" == "pacman" ]]; then
        latest_version=$(pacman -Si "$package_name" 2>/dev/null | grep 'Version' | awk '{print $3}')
    fi
    # print version if get
    if [[ -n "$latest_version" ]]; then
        echo "$latest_version"
    fi

}

function create_shell_script() {
    local script_path="$1"
    local shell_setup_content="$2"

    # Create directory if it doesn't exist
    mkdir -p "$(dirname "$script_path")"

cat << 'EOF' > "$script_path"
#!/bin/bash

termux_desktop_path="/data/data/com.termux/files/usr/etc/termux-desktop"
config_file="$termux_desktop_path/configuration.conf"
log_file="/data/data/com.termux/files/home/termux-desktop.log"

EOF
    typeset -f print_log print_success print_failed check_and_delete check_and_create_directory extract check_and_restore >> "$script_path"
    echo "$shell_setup_content" >> "$script_path"
    
    # Make script executable
    chmod +x "$script_path"
    
    # Verify script was created
    if [[ ! -f "$script_path" ]]; then
        print_failed "Failed to create script at $script_path"
        return 1
    fi
}

function distro_run() {
    local command="$1"
        # Multi-line command - create temporary script
pd_setup_content="${command}"

eval "create_shell_script '$distro_path/root/pd_setup.sh' '$pd_setup_content'"
proot-distro login "$selected_distro" -- /bin/bash /root/pd_setup.sh
}

function pd_package_install_and_check() {
distro_run "
    packs_list=($@)

    # Get distro id
    if [ -f /etc/os-release ]; then
        . /etc/os-release
    fi

    # Install package
    for package_name in "\${packs_list[@]}"; do
        echo "Installing package: \$package_name"
        if [[ "\$ID" == "debian" ]] || [[ "\$ID" == "ubuntu" ]]; then
            apt install "\$package_name" -y
        elif [[ "\$ID" == arch* ]]; then
            pacman -Sy --noconfirm "\$package_name"
        elif [[ "\$ID" == "fedora" ]]; then
            dnf install "\$package_name" -y
        fi

        # Handle error in installation
        if [ \$? -ne 0 ]; then
            echo "Error detected during installation of: \$package_name"
            if [[ "\$ID" == "debian" ]] || [[ "\$ID" == "ubuntu" ]]; then
                apt --fix-broken install -y
                dpkg --configure -a
                apt install "\$package_name" -y
            elif [[ "\$ID" == arch* ]]; then
                pacman -Syu --noconfirm
                pacman -Sy --noconfirm "\$package_name"
            elif [[ "\$ID" == "fedora" ]]; then
                dnf --refresh install -y
                rpm --rebuilddb
                dnf install "\$package_name" -y
            fi
        fi

        # Reinstall if necessary
        if [[ "\$ID" == "debian" ]] || [[ "\$ID" == "ubuntu" ]]; then
            if ! dpkg -s "\$package_name" >/dev/null 2>&1; then
                apt install "\$package_name" -y
            fi
        elif [[ "\$ID" == arch* ]]; then
            if ! pacman -Qi "\$package_name" >/dev/null 2>&1; then
                pacman -Sy --noconfirm "\$package_name"
            fi
        elif [[ "\$ID" == "fedora" ]]; then
            if ! rpm -q "\$package_name" >/dev/null 2>&1; then
                dnf install "\$package_name" -y
            fi
        fi

        # Check installation
        if [[ "\$ID" == "debian" ]] || [[ "\$ID" == "ubuntu" ]]; then
            if dpkg -s "\$package_name" >/dev/null 2>&1; then
                print_success "\$package_name installed successfully"
            fi
        elif [[ "\$ID" == arch* ]]; then
            if pacman -Qi "\$package_name" >/dev/null 2>&1; then
                print_success "\$package_name installed successfully"
            fi
        elif [[ "\$ID" == "fedora" ]]; then
            if rpm -q "\$package_name" >/dev/null 2>&1; then
                print_success "\$package_name installed successfully"
            fi
        fi
    done
"
}

read_conf
distro_path="/data/data/com.termux/files/usr/var/lib/proot-distro/installed-rootfs/$selected_distro"