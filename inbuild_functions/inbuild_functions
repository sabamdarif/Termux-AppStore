#!/data/data/com.termux/files/usr/bin/bash

termux_desktop_path="/data/data/com.termux/files/usr/etc/termux-desktop"
config_file="$termux_desktop_path/configuration.conf"

function print_success() {
    echo -e "\033[32m[✓]\033[0m $1"
}

function print_failed() {
    echo -e "\033[31m[✗]\033[0m $1"
    exit 1
}

function print_warn() {
    echo -e "\033[33m[!]\033[0m $1"
}

function print_status() {
    echo -e "\033[36m[*]\033[0m $1"
}

function print_cmd() {
    echo -e "\033[35m[$]\033[0m \033[1m$1\033[0m"
}

function print_header() {
    echo -e "\033[1;44;97m $1 \033[0m"
}

function print_section() {
    echo 
    echo -e "\033[1;34m=== $1 ===\033[0m"
}

function wait_for_keypress() {
    read -n1 -s -r -p "Press any key to continue..."
    echo
}

function check_and_create_directory() {
    local max_retries=3
    local attempt=1
    
    while (( attempt <= max_retries )); do
        if [[ ! -d "$1" ]]; then
            mkdir -p "$1" && break
        fi
        ((attempt++))
        sleep 1
    done
}

function check_and_delete() {
    local max_retries=3
    local attempt=1
    
    for item in "$@"; do
        while (( attempt <= max_retries )); do
            if [[ -e "$item" ]]; then
                rm -rf "$item" >/dev/null 2>&1 && break
            fi
            ((attempt++))
            sleep 1
        done
    done
}

# first check then backup
function check_and_backup() {
    local max_retries=3
    local attempt=1
    
    for files_folders in "$@"; do
        for file in $files_folders; do
            if [[ -e "$file" ]]; then
                local date_str=$(date +"%d-%m-%Y")
                local backup="${file}-${date_str}.bak"
                
                while (( attempt <= max_retries )); do
                    if mv "$file" "$backup"; then
                        echo "backed up file $file"
                        break
                    fi
                    ((attempt++))
                    sleep 1
                done
            fi
        done
    done
}

function download_file() {
    local url="$1"
    local file_name="$(basename "$url")"
    local max_retries=5
    local attempt=1

    if ! command -v aria2c &> /dev/null; then
        package_install_and_check "aria2"
    fi
    check_and_delete "$file_name"

    while (( attempt <= max_retries )); do
        if aria2c --summary-interval=1 -x16 -s16 --retry-wait=15 --max-tries=5 --dir="./" "$url" && [[ -f "$file_name" && -s "$file_name" ]]; then
            print_success "Download completed: $file_name"
            return 0
        fi

        print_warn "Download failed, attempt $attempt of $max_retries."
        sleep 2
        ((attempt++))
    done

    print_failed "Download failed after $max_retries attempts: $file_name"
}

function extract() {
    local archive="$1"
    local output_dir="$2"
    local max_retries=5
    local attempt=1

    while (( attempt <= max_retries )); do
        if [[ ! -f "$archive" ]]; then
            print_failed "Error: '$archive' does not exist!"
        fi

        local dir_arg=""
        if [[ -n "$output_dir" ]]; then
            check_and_create_directory "$output_dir"
            dir_arg="-C $output_dir"
        fi

        case "$archive" in
            *.tar.gz|*.tgz)
                if tar xvzf "$archive" $dir_arg --no-same-owner -h; then break; fi
                ;;
            *.tar.xz)
                if tar xvJf "$archive" $dir_arg --no-same-owner -h; then break; fi
                ;;
            *.tar.bz2|*.tbz2)
                if tar xvjf "$archive" $dir_arg --no-same-owner -h; then break; fi
                ;;
            *.tar)
                if tar xvf "$archive" $dir_arg --no-same-owner -h; then break; fi
                ;;
            *.bz2)
                if [[ -n "$output_dir" ]]; then
                    if bunzip2 -c "$archive" > "$output_dir/$(basename "${archive%.bz2}")"; then break; fi
                else
                    if bunzip2 "$archive"; then break; fi
                fi
                ;;
            *.gz)
                if [[ -n "$output_dir" ]]; then
                    if gunzip -c "$archive" > "$output_dir/$(basename "${archive%.gz}")"; then break; fi
                else
                    if gunzip -c "$archive" > "${archive%.gz}"; then break; fi
                fi
                ;;
            *.7z)
                if [[ -n "$output_dir" ]]; then
                    if 7z x "$archive" -o"$output_dir" -y; then break; fi
                else
                    if 7z x "$archive" -y; then break; fi
                fi
                ;;
            *.rar)
                if [[ -n "$output_dir" ]]; then
                    if unrar x -o+ "$archive" "$output_dir"; then break; fi
                else
                    if unrar x -o+ "$archive"; then break; fi
                fi
                ;;
            *.zip)
                if [[ -n "$output_dir" ]]; then
                    if unzip -o "$archive" -d "$output_dir"; then break; fi
                else
                    if unzip -o "$archive"; then break; fi
                fi
                ;;
            *)
                print_failed "Unsupported archive format: $archive"
                ;;
        esac

        print_warn "Extraction failed, attempt $attempt of $max_retries."
        sleep 2
        ((attempt++))
    done

    if (( attempt > max_retries )); then
        print_failed "Extraction failed after $max_retries attempts: $archive"
    fi

    print_success "Extraction completed: $archive"
}

# find a backup file which end with a number pattern and restore it
function check_and_restore() {
    local target_path="$1"
    local max_retries=3
    local attempt=1
    
    local dir=$(dirname "$target_path")
    local base_name=$(basename "$target_path")
    local latest_backup=$(find "$dir" -maxdepth 1 -type f -name "$base_name-[0-9][0-9]-[0-9][0-9]-[0-9][0-9][0-9][0-9].bak" 2>/dev/null | sort | tail -n 1)

    if [[ -z "$latest_backup" ]]; then
        print_failed "No backup file found for ${target_path}."
    fi

    if [[ -e "$target_path" ]]; then
        print_failed "Original file or directory ${target_path} already exists."
    fi

    while (( attempt <= max_retries )); do
        if mv "$latest_backup" "$target_path"; then
            print_success "Restored ${latest_backup} to ${target_path}"
            break
        fi
        ((attempt++))
        sleep 1
    done
}

function detact_package_manager() {
    source "/data/data/com.termux/files/usr/bin/termux-setup-package-manager"
    if [[ "$TERMUX_APP_PACKAGE_MANAGER" == "apt" ]]; then
        PACKAGE_MANAGER="apt-get"
    elif [[ "$TERMUX_APP_PACKAGE_MANAGER" == "pacman" ]]; then
        PACKAGE_MANAGER="pacman"
    else
        PACKAGE_MANAGER="pkg"
        print_warn "Using pkg as fallback package manager"
    fi
}

# will check if the package is already installed or not, if it installed then it will reinstall it and at the end it will print success/failed message
function package_install_and_check() {
    local max_retries=3
    local attempt=1
    local packs_list=($@)
    
    for package_name in "${packs_list[@]}"; do
        echo "Processing package: $package_name"
        attempt=1

        # For APT systems, run dpkg --configure -a before attempting the install
        if [[ "$PACKAGE_MANAGER" != "pacman" ]]; then
            echo "Checking and fixing any corrupted installations..."
            dpkg --configure -a
        fi

        while (( attempt <= max_retries )); do
            if [[ "$PACKAGE_MANAGER" == "pacman" ]]; then
                # Check if package is already installed
                if pacman -Qi "$package_name" >/dev/null 2>&1; then
                    break
                fi

                if [[ $package_name == *"*"* ]]; then
                    echo "Processing wildcard pattern: $package_name"
                    packages=$(pacman -Ssq "${package_name%*}" 2>/dev/null)
                    for pkgs in $packages; do
                        echo "Installing matched package: $pkgs"
                        if pacman -Sy --noconfirm --overwrite '*' "$pkgs"; then
                            print_success "$pkgs installed successfully"
                        fi
                    done
                    break
                else
                    if pacman -Sy --noconfirm --overwrite '*' "$package_name"; then
                        print_success "$package_name installed successfully"
                        break
                    fi
                fi
            else
                # For APT-based systems, first check if the package is installed
                if dpkg -s "$package_name" >/dev/null 2>&1; then
                    echo "Package already installed. Attempting reconfiguration and reinstallation..."
                    dpkg --configure -a
                    apt-get reinstall "$package_name" -y
                else
                    echo "Installing package after fixing potential issues..."
                    dpkg --configure -a
                    apt-get install "$package_name" -y
                fi

                if dpkg -s "$package_name" >/dev/null 2>&1; then
                    print_success "$package_name installed successfully"
                    break
                fi
            fi

            print_warn "Installation failed, attempt $attempt of $max_retries."
            sleep 2
            ((attempt++))
        done

        if (( attempt > max_retries )); then
            print_failed "Failed to install $package_name after $max_retries attempts"
        fi
    done
}

# will check the package is installed or not then remove it
function package_remove_and_check() {
    local max_retries=3
    local attempt=1
    local packs_list=($@)
    
    for package_name in "${packs_list[@]}"; do
        echo "Processing package: $package_name"
        attempt=1

        # For APT-based systems, attempt to fix any broken installations before removal
        if [[ "$PACKAGE_MANAGER" != "pacman" ]]; then
            echo "Fixing any potential broken installations before removal..."
            dpkg --configure -a
        fi

        while (( attempt <= max_retries )); do
            if [[ $package_name == *"*"* ]]; then
                echo "Processing wildcard pattern: $package_name"
                if [[ "$PACKAGE_MANAGER" == "pacman" ]]; then
                    packages=$(pacman -Qq | grep -E "${package_name//\*/.*}")
                else
                    packages=$(dpkg --get-selections | awk '{print $1}' | grep -E "${package_name//\*/.*}")
                fi

                for pkg in $packages; do
                    echo "Removing matched package: $pkg"
                    if [[ "$PACKAGE_MANAGER" == "pacman" ]]; then
                        if pacman -Qi "$pkg" >/dev/null 2>&1; then
                            if pacman -Rnds --noconfirm "$pkg"; then
                                print_success "$pkg removed successfully"
                            fi
                        fi
                    else
                        if dpkg -s "$pkg" >/dev/null 2>&1; then
                            dpkg --configure -a
                            if apt-get autoremove "$pkg" -y; then
                                print_success "$pkg removed successfully"
                            fi
                        fi
                    fi
                done
                break
            else
                if [[ "$PACKAGE_MANAGER" == "pacman" ]]; then
                    if pacman -Qi "$package_name" >/dev/null 2>&1; then
                        if pacman -Rnds --noconfirm "$package_name"; then
                            print_success "$package_name removed successfully"
                            break
                        fi
                    fi
                else
                    if dpkg -s "$package_name" >/dev/null 2>&1; then
                        dpkg --configure -a
                        if apt-get autoremove "$package_name" -y; then
                            print_success "$package_name removed successfully"
                            break
                        fi
                    fi
                fi
            fi

            print_warn "Removal failed, attempt $attempt of $max_retries."
            sleep 2
            ((attempt++))
        done

        if (( attempt > max_retries )); then
            print_failed "Failed to remove $package_name after $max_retries attempts"
        fi
    done
}

function get_file_name_number() {
    current_file=$(basename "$0")
    folder_name="${current_file%.sh}"
    theme_number=$(echo "$folder_name" | grep -oE '[1-9][0-9]*')
}

# get the latest version from a github releases
# ex. latest_tag=$(get_latest_release "$repo_owner" "$repo_name")
function get_latest_release() {
	local repo_owner="$1"
	local repo_name="$2"
	curl -s "https://api.github.com/repos/$repo_owner/$repo_name/releases/latest" |
	grep '"tag_name":' |
	sed -E 's/.*"v?([^"]+)".*/\1/'
}

function preprocess_conf() {
    # Preprocess configuration file:
    # 1. Remove lines where keys contain dashes (-).
    # 2. Remove quotes from keys and values.
	echo " Prepering config file..."
    sed -i -E '/^[[:space:]]*[^#=]+-.*=/d; s/^([[:space:]]*[^#=]+)="([^"]*)"/\1=\2/g' "$config_file"
}

function read_conf() {
    if [[ ! -f "$config_file" ]]; then
        print_failed "Configuration file not found: $config_file"
        exit 1
    fi
    source "$config_file"
}

function update_sys() {
    if [[ "$PACKAGE_MANAGER" == "pacman" ]]; then
        pacman -Syu --noconfirm
    else
        apt-get update -y -o Dpkg::Options::="--force-confnew"
        apt-get upgrade -y -o Dpkg::Options::="--force-confnew"
    fi
}

function fix_exec() {
    local file="/data/data/com.termux/files/usr/share/applications/$1"
    sed -i -E "/^Exec=/ {
        /pdrun/ { 
            s/\$/ $2/; b 
        }
        s|^Exec=([^ ]+)(.*)|Exec=pdrun \1\2 $2|
    }" "$file"
}

function install_appimage() {
local appimage_file_name="$1"
local appimage_directory_name="$2"
distro_run '
check_and_create_directory '/opt/AppImageLauncher/'
check_and_delete '/opt/AppImageLauncher/$appimage_directory_name'
'
mv -f "$appimage_file_name" "$distro_path/opt/AppImageLauncher/"
distro_run "
cd /opt/AppImageLauncher
ldconfig
chmod +x '${appimage_file_name}'
APPIMAGE_EXTRACT_AND_RUN=1 ./${appimage_file_name} --appimage-extract
mv -f squashfs-root '$appimage_directory_name'
check_and_delete '${appimage_file_name}'
"
}

function get_latest_version() {
    local package_name
    local latest_version
    package_name=$1
    if [[ "$PACKAGE_MANAGER" == "apt" ]]; then
        latest_version=$(apt-cache policy "$package_name" | grep 'Candidate:' | awk '{print $2}')
    elif [[ "$PACKAGE_MANAGER" == "pacman" ]]; then
        latest_version=$(pacman -Si "$package_name" 2>/dev/null | grep 'Version' | awk '{print $3}')
    fi
    # print version if get
    if [[ -n "$latest_version" ]]; then
        echo "$latest_version"
    fi

}

function create_shell_script() {
    local script_path="$1"
    local shell_setup_content="$2"

    # Create directory if it doesn't exist
    mkdir -p "$(dirname "$script_path")"

cat << 'EOF' > "$script_path"
#!/bin/bash

termux_desktop_path="/data/data/com.termux/files/usr/etc/termux-desktop"
config_file="$termux_desktop_path/configuration.conf"
log_file="/data/data/com.termux/files/home/termux-desktop.log"

EOF
    typeset -f print_success print_failed check_and_delete check_and_create_directory extract check_and_restore >> "$script_path"
    echo "$shell_setup_content" >> "$script_path"
    
    # Make script executable
    chmod +x "$script_path"
    
    # Verify script was created
    if [[ ! -f "$script_path" ]]; then
        print_failed "Failed to create script at $script_path"
        exit 1
    fi
}

function distro_run() {
    local command="$1"
        # Multi-line command - create temporary script
pd_setup_content="${command}"

eval "create_shell_script '$distro_path/root/pd_setup.sh' '$pd_setup_content'"
proot-distro login "$selected_distro" -- /bin/bash /root/pd_setup.sh
}

function pd_package_install_and_check() {
    distro_run "
        packs_list=(\"$@\")
        
        # Get distro ID
        if [ -f /etc/os-release ]; then
            . /etc/os-release
        fi

        # Install packages
        for package_name in \"\${packs_list[@]}\"; do
            echo \"Installing package: \$package_name\"
            if [[ \"\$ID\" == \"debian\" ]] || [[ \"\$ID\" == \"ubuntu\" ]]; then
                apt install \"\$package_name\" -y
            elif [[ \"\$ID\" == arch* ]]; then
                pacman -Sy --noconfirm \"\$package_name\"
            elif [[ \"\$ID\" == \"fedora\" ]]; then
                dnf install \"\$package_name\" -y
            fi

            # Check if installed
            if command -v \"\$package_name\" >/dev/null 2>&1; then
                echo \"\$package_name installed successfully\"
            else
                echo \"Error installing \$package_name\"
            fi
        done
    " "$@"
}

read_conf
distro_path="/data/data/com.termux/files/usr/var/lib/proot-distro/installed-rootfs/$selected_distro"